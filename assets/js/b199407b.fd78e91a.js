"use strict";(self.webpackChunkcclog=self.webpackChunkcclog||[]).push([[913],{7085:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/hyperloglog","metadata":{"permalink":"/cclog/blog/hyperloglog","source":"@site/blog/hyperloglog.md","title":"HyperLogLog","description":"\u524d\u8a00","date":"2024-11-10T07:59:10.000Z","tags":[{"inline":false,"label":"DSA","permalink":"/cclog/blog/tags/dsa","description":"\u653e\u4e00\u4e9b\u8cc7\u6599\u7d50\u69cb\u6216\u662f\u6f14\u7b97\u6cd5"}],"readingTime":11.12,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"HyperLogLog","tags":["dsa"]},"unlisted":false},"content":"## \u524d\u8a00\\n\\n\u4eca\u5929\u8981\u4f86\u4ecb\u7d39\u4e00\u500b\u9177\u9177\u7684\u6771\u897f  \\n\u5c31\u662f\u6211\u5011\u9019\u7bc7\u7684\u4e3b\u89d2 **HyperLogLog**   \\n\u5728\u8acb\u4ed6\u51fa\u5834\u4e4b\u524d\u6211\u5011\u5148\u4f86\u4ecb\u7d39\u8a08\u6578\u554f\u984c  \\n\u5982\u679c\u6211\u5011\u4eca\u5929\u8981\u5728\u4e00\u5806\u5143\u7d20\u4e2d\u7b97\u51fa\u6709\u5e7e\u500b\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u4f60\u6703\u600e\u9ebc\u505a\uff1f   \\n\x3c!-- truncate --\x3e\\n\u6700\u7121\u8166\u7684\u89e3\u6cd5\u5c31\u662f\u76f4\u63a5\u4f7f\u7528\u7a0b\u5f0f\u8a9e\u8a00\u5167\u5efa\u7684\u96c6\u5408\u4e00\u500b\u4e00\u500b\u585e\u9032\u53bb  \\n\u4f46\u9019\u500b\u505a\u6cd5\u53ea\u9069\u5408\u5c0f\u91cf\u7684\u8cc7\u6599  \\n\u7576\u4eca\u5929\u8cc7\u6599\u91cf\u4e0a\u5230\u4e00\u5b9a\u7684\u7a0b\u5ea6\u6642\u5167\u5efa\u7684\u96c6\u5408\u5c31\u6703\u5403\u6389\u5de8\u91cf\u7684\u8a18\u61b6\u9ad4   \\n\u90a3\u4eca\u5929\u5982\u679c\u6211\u53ef\u4ee5\u5141\u8a31\u4e00\u9ede\u8aa4\u5dee\u5462\uff1f  \\n\u50cf\u662f\u7db2\u7ad9\u7d71\u8a08\u4eba\u6578\u4e0d\u4e00\u5b9a\u8981\u505a\u5230\u5b8c\u5168\u7cbe\u78ba  \\n\u6293\u500b\u4f30\u8a08\u503c\u5373\u53ef\uff0c\u9019\u5c31\u662f\u6211\u5011 **HyperLogLog** \u51fa\u5834\u7684\u6642\u5019  \\n\u8b93\u6211\u5011\u6b61\u8fce\u4ed6\ud83d\ude4c\ud83d\ude4c\\n\\n## \u6982\u5ff5\\nHyperLogLog \u662f\u4e00\u7a2e\u900f\u904e\u6a5f\u7387\u4f86\u4f30\u8a08\u4e00\u500b\u57fa\u6578\u7684\u8cc7\u6599\u7d50\u69cb  \\n\u540c\u6642\u4f7f\u7528\u975e\u5e38\u5c11\u7684\u8cc7\u6599\u91cf\uff0c\u5b8c\u7f8e\u7b26\u5408\u6211\u5011\u7684\u9700\u6c42\uff0c\u8036   \\n\u90a3\u6211\u5011\u5148\u4ecb\u7d39\u4ed6\u7684\u6838\u5fc3\u539f\u7406: **\u6a5f\u7387\u5c0f\u7684\u4e8b\u60c5\u4e0d\u5bb9\u6613\u767c\u751f**  \\n\u63db\u53e5\u8a71\u8aaa\uff0c\u7576\u4e00\u500b\u6a5f\u7387\u5c0f\u7684\u4e8b\u60c5\u767c\u751f\u6642  \\n\u6211\u5011\u5f88\u6709\u53ef\u80fd\u5df2\u7d93\u6709\u5927\u91cf\u7684\u57fa\u6578\u4e86  \\n\u8209\u4f8b\u5927\u6a02\u900f\u5982\u679c\u4e2d\u734e\u6a5f\u7387\u662f 1%  \\n\u7576\u4f60\u62bd\u5230\u6642\u5c31\u6703\u89ba\u5f97\u662f 100 \u500b\u4eba\u4e2d\u6700\u5e78\u904b\u7684  \\n\u7576\u7136\u6709\u53ef\u80fd\u591a\u500b\u4eba\u540c\u6642\u4e2d\u734e\uff0c\u800c\u4e14\u5177\u9ad4\u5e7e\u500b\u4eba\u62bd\u662f\u4e0d\u77e5\u9053    \\n\u4f46\u662f\u76f4\u89c0\u4e0a\u53c3\u52a0\u62bd\u734e\u7684\u4eba\u6578\u662f\u4e00\u500b\u63a5\u8fd1 100 \u7684\u6578  \\n\u800c Hyperloglog \u662f\u900f\u904e\u96a8\u6a5f\u6578\u958b\u982d\u6709\u5e7e\u500b\u9023\u7e8c\u7684 0 \u4f86\u8868\u793a\u767c\u751f\u7684\u6a5f\u7387  \\n\u6bd4\u65b9\u8aaa\u958b\u982d\u6709\u9023\u7e8c\u4e09\u500b 0 \u767c\u751f\u7684\u6a5f\u7387\u61c9\u8a72\u662f 1/8\\n### \u65b0\u589e\u5143\u7d20\\n\u90a3\u8b1b\u5b8c\u6838\u5fc3\u539f\u7406\u5f8c\u6211\u5011\u4f86\u770b\u770b\u4ed6\u662f\u600e\u9ebc\u904b\u4f5c\u7684\u5427\uff01  \\n\u525b\u624d\u63d0\u5230\u96a8\u6a5f\u6578\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e\u96dc\u6e4a\u60f3\u7d00\u9304\u7684\u5143\u7d20\u4f86\u5f97\u5230\u4e00\u500b\u96a8\u6a5f\u6578  \\n\u5e95\u4e0b\u5217\u51fa\u4e00\u4e9b\u6211\u5011\u6703\u4f7f\u7528\u5230\u7684\u8b8a\u6578\\n* `m`: \u4ee3\u8868\u96dc\u6e4a\u503c\u7684\u524d `m` \u4f4d bits  \\n* `registers`: \u4e00\u500b\u5927\u5c0f\u70ba $2^m$ \u6b21\u65b9\u7684 array\uff0c\u521d\u59cb\u503c\u7686\u70ba `0`\\n\\n\u800c\u4ed6\u63d0\u4f9b\u7684\u64cd\u4f5c\u4e3b\u8981\u6709\u5169\u500b\uff0c\u4e00\u500b\u662f\u52a0\u5165\uff0c\u53e6\u4e00\u500b\u662f\u4f30\u7b97\u57fa\u6578  \\n\u5728\u6211\u5011\u8981\u52a0\u5165\u65b0\u7684\u5143\u7d20\u9032\u53bb\u6642  \\n\u6211\u5011\u6703\u5148\u5c07\u8981\u52a0\u5165\u7684\u5143\u7d20 hash \u6210\u4e00\u500b 64 bits \u7684\u6578\u5b57  \\n\u4e26\u53d6\u51fa\u4ed6\u7684\u524d `m` \u500b bits \u7576\u6210\u7d22\u5f15\uff0c\u7528\u4f86\u5c0b\u627e\u5c0d\u61c9\u7684 register  \\n\u63a5\u8457\u6211\u5011\u5c31\u6703\u7528\u5269\u4e0b\u7684 `(64 - m)` bits \u6700\u524d\u9762\u6709\u5e7e\u500b\u9023\u7e8c\u7684 `0` \u4f86\u66f4\u65b0\u5c0d\u61c9\u7684 register  \\n\u4f46\u82e5\u5c0d\u61c9\u7684 register \u539f\u672c\u7684\u503c\u66f4\u5927\u5c31\u4e0d\u66f4\u65b0     \\n\u53ef\u4ee5\u770b\u4e0b\u5716\u4f86\u66f4\u660e\u767d\u4e00\u9ede  \\n\u85cd\u8272\u7684\u90e8\u5206\u7528\u4f86\u627e\u5c0d\u61c9 register\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u7528\u4f86\u66f4\u65b0 register\\n![](./img/hyperloglog/process.png)\\n\\n:::info \u8209\u4f8b\\n\u6211\u5011\u4eca\u5929\u5047\u8a2d\u4e00\u958b\u59cb\u7684 `m` \u8a2d\u5b9a\u70ba `2`  \\n\u4e26\u4e14\u539f\u5148 Hyperloglog \u88e1\u9762\u4e26\u6c92\u6709\u5132\u5b58\u4efb\u4f55\u6771\u897f  \\n\u90a3\u56e0\u70ba `m` \u662f `2`\uff0c\u6240\u4ee5\u6211\u5011\u9700\u8981 `4` \u500b register  \\n\u7576\u6211\u5011\u4eca\u5929\u65b0\u589e `hi` \u9019\u500b\u5143\u7d20\u6642    \\n\u5047\u8a2d `hi` \u7684 hash \u70ba `10001.......` (\u4e8c\u9032\u4f4d)  \\n\u6211\u5011\u5148\u53d6\u51fa\u4ed6\u7684\u524d\u5169\u500b bits `10`\uff0c\u5c0d\u61c9\u7684\u6578\u5b57\u662f `2`  \\n\u4ee3\u8868\u6211\u5011\u8981\u66f4\u65b0\u7b2c\u4e09\u500b register  \\n\u800c\u66f4\u65b0\u7684\u503c\u70ba `2`\uff0c\u56e0\u70ba\u5f8c\u9762\u7684 `62` \u500b bits \u958b\u982d\u6709 `2` \u500b\u9023\u7e8c\u7684 `0`  \\n\u4f46\u82e5\u5c0d\u61c9 register \u539f\u672c\u7684\u503c\u5c31\u5927\u65bc `2` \u5247\u4e0d\u66f4\u65b0\\n:::\\n\\n\u6211\u5011\u53ef\u4ee5\u770b\u5230 Hyperloglog \u85c9\u7531\u5132\u5b58\u76ee\u524d\u51fa\u73fe\u6700\u591a\u9023\u7e8c\u7684 0 \u7684\u4f86\u4f30\u7b97\u57fa\u6578  \\n\u90a3\u9019\u908a\u5c31\u6703\u6709\u53e6\u5916\u4e00\u500b\u554f\u984c\u4e86\uff0c\u70ba\u4ec0\u9ebc\u9700\u8981\u5f88\u591a\u500b register \u5462\uff1f  \\n\u6211\u76f4\u63a5\u628a\u5168\u90e8 bits \u90fd\u62ff\u4f86\u7528\u4e0d\u597d\u55ce \uff1f  \\n\u9019\u500b\u554f\u984c\u6211\u5011\u5728\u4e0b\u9762\u8aaa\u660e\uff5e\\n\\n### \u8a08\u7b97\u57fa\u6578\\n\u6709\u4e86\u5143\u7d20\u4e4b\u5f8c\u4e0b\u4e00\u6b65\u5c31\u662f\u4f86\u4f30\u7b97 HyperLogLog \u88e1\u9762\u5230\u5e95\u6709\u591a\u5c11\u5143\u7d20  \\n\u90a3\u516c\u5f0f\u7684\u8a71\u5982\u4e0b\\n$\\\\alpha$ \u70ba\u4fee\u6b63\u4fc2\u6578\uff0c\u5728 [Redis \u7684\u5be6\u4f5c](https://github.com/redis/redis/blob/unstable/src/hyperloglog.c#L368C1-L368C47)\u4e2d\u63a1\u7528\u7684\u662f `0.72134` ( $\\\\frac{1}{2ln2}$ )  \\n\u9019\u500b\u503c\u7684\u5177\u9ad4\u7531\u4f86\u53ef\u80fd\u9700\u8981\u53c3\u8003\u539f\u8ad6\u6587\uff0c\u6211\u4e5f\u4e0d\u6e05\u695a XD  \\n\u800c `m` \u7684\u542b\u7fa9\u8207\u4e0a\u4e00\u7bc0\u63d0\u5230\u7684 `m` \u76f8\u540c  \\n$$\\nCardinality = \\\\alpha \\\\times m \\\\times \\\\frac{m}{\\\\sum^m_{i = 1} 2 ^{-Register[i]}}\\n$$\\n\\n\u770b\u5230\u9019\u908a\u4f60\u53ef\u80fd\u6703\u975e\u5e38\u77c7\u903c\uff0c\u5169\u500b `m` \u5c2c\u9ebb\u4e0d\u4e58\u4e00\u8d77\u8b8a\u6210 $m^2$  \\n\u4e0b\u9762\u90a3\u4e00\u5768\u53c8\u662f\u4ec0\u9ebc\uff1f\\n\u4e0d\u6025\uff0c\u6211\u5011\u5148\u4f86\u4ecb\u7d39\u4e00\u7a2e\u5e73\u5747\u6cd5\\n\\n### \u8abf\u548c\u5e73\u5747\\n\u6211\u5011\u4e00\u822c\u6700\u5e38\u898b\u7684\u5e73\u5747\u5c31\u662f\u5168\u90e8\u76f8\u52a0\u518d\u9664\u4ee5\u7e3d\u500b\u6578\uff0c\u9019\u7a2e\u5e73\u5747\u7a31\u70ba\u7b97\u8853\u5e73\u5747\u6578  \\n\u6bd4\u5982\u8aaa\u6211\u8ddf\u90ed\u53f0\u9298\u7684\u8ca1\u7522\u5e73\u5747\u5c31\u662f\u6211\u5011\u5169\u500b\u7684\u8ca1\u7522\u76f8\u52a0 $\\\\div$ 2  \\n\u4f46\u56e0\u70ba\u90ed\u53f0\u9298\u592a\u6709\u9322\u4e86\uff0c\u6240\u4ee5\u4f60\u6703\u767c\u73fe\u9019\u500b\u5e73\u5747\u5e7e\u4e4e\u7b49\u65bc\u90ed\u53f0\u9298\u7684\u8ca1\u7522 $\\\\div$ 2  \\n\u9019\u5c31\u662f\u7b97\u8853\u5e73\u5747\u6578\u7684\u554f\u984c\uff0c\u5bb9\u6613\u56e0\u70ba\u6975\u7aef\u7684\u503c\u800c\u5f97\u5230\u6c92\u6709\u4ec0\u9ebc\u610f\u7fa9\u7684\u7d50\u679c\u3002  \\n\u4eca\u5929\u6211\u5011\u7684 HyperLogLog \u5176\u5be6\u4e5f\u6709\u9019\u7a2e\u554f\u984c  \\n\u6211\u5011\u60f3\u85c9\u7531\u6700\u591a\u6709\u5e7e\u500b\u9023\u7e8c\u7684 0 \u4f86\u4f30\u7b97\u57fa\u6578  \\n\u4f46\u6709\u6c92\u6709\u53ef\u80fd\u5728\u904b\u6c23\u7206\u68da\u7684\u60c5\u6cc1\u4e0b\u7b2c\u4e00\u6b21\u5c31\u5f97\u5230\u8d85\u591a\u7684 0  \\n\u5c0e\u81f4\u6211\u5011\u56b4\u91cd\u9ad8\u4f30\u6211\u5011\u7684\u57fa\u6578  \\n\u5728\u539f\u672c\u7684\u8ad6\u6587\u4e2d\u4f7f\u7528\u8abf\u548c\u5e73\u5747\u6578\u4f86\u964d\u4f4e\u9019\u7a2e\u5f71\u97ff  \\n\u5982\u679c\u4eca\u5929\u6709 `n` \u500b\u503c\uff0c\u516c\u5f0f\u5982\u4e0b   \\n$\\n\\\\frac{n}{\\\\frac{1}{m_1} + \\\\dots + \\\\frac{1}{m_n}}\\n$\\n\\n:::info \u8209\u4f8b\\n\u5982\u679c\u4eca\u5929\u6211\u6709 `10` \u584a\uff0c\u90ed\u53f0\u9298\u6709 `10`\u842c\u584a  \\n\u90a3\u6211\u5011\u7684\u8abf\u548c\u5e73\u5747\u5c31\u662f $\\\\frac{2}{\\\\frac{1}{10} + \\\\frac{1}{100000}} = 19.998$   \\n:::\\n\\n### Back to \u57fa\u6578\\n\u6709\u4e86\u4e0a\u9762\u7684\u516c\u5f0f\u5f8c\uff0c\u518d\u770b\u770b\u8a08\u7b97\u57fa\u6578\u7684\u6b65\u9a5f  \\n\u6700\u5f8c\u90a3\u4e00\u9805\u5f88\u5641\u5fc3\u7684\u503c\u4e0d\u5c31\u662f\u5c0d\u6240\u6709\u8a08\u6578\u5668\u4e2d\u7684\u503c\u6c42\u8abf\u548c\u5e73\u5747\u55ce\uff1f  \\n\u6703\u8207 `2` \u7684\u6b21\u65b9\u6709\u95dc\u662f\u56e0\u70ba\u6211\u5011\u662f\u4e8c\u9032\u4f4d\uff0c\u9023\u7e8c\u7684 `n` \u500b `0` \u51fa\u73fe\u7684\u6a5f\u7387\u662f $2^{-n}$  \\n\u90a3\u8abf\u548c\u5e73\u5747\u524d\u9762\u7684\u90a3\u500b `m` \u610f\u7fa9\u5c31\u662f\u5e73\u5747 $\\\\times$ \u500b\u6578 $=$ \u7e3d\u548c  \\n\u6700\u5f8c\u518d\u505a\u6211\u4e0d\u61c2\u7684\u4fee\u6b63\u5f97\u5230\u6211\u5011\u60f3\u8981\u7684\u57fa\u6578  \\n\u73fe\u5728\u6211\u5011\u77e5\u9053\u70ba\u4ec0\u9ebc\u8981\u6709\u5f88\u591a register \u800c\u4e0d\u662f\u4e00\u500b\u503c\u4f86\u5b58\u9023\u7e8c\u7684 0 \u7684\u6700\u5927\u503c  \\n\u56e0\u70ba\u9019\u6a23\u900f\u904e\u5f8c\u9762\u8abf\u548c\u5e73\u5747\u6e1b\u5c11\u6975\u7aef\u5f71\u97ff  \\n\\n\\n## \u52d5\u52d5\u624b\\n\u641e\u4e86\u9019\u9ebc\u4e45\u8b93\u6211\u5011\u5beb\u9ede\u6263\u73a9\u73a9\u770b\u5427\uff01  \\n\u70ba\u6c42\u5feb\u901f\u5beb\u7684\u6709\u9ede\u919c..  \\n\u6700\u958b\u59cb\u7576\u7136\u662f\u5ba3\u544a\u4e00\u500b class  \\n\u9084\u6709\u6211\u5011\u60f3\u8981\u7684 registers \u500b\u6578 (\u7531 `m` \u63a7\u5236)  \\nbitmask \u662f\u6211\u5011\u70ba\u65b9\u4fbf\u6c42 register \u7684 index\uff0c\u4ed6\u7684\u4e8c\u9032\u4f4d\u5c31\u662f `m` \u500b `1`\\n```py\\n#!/usr/bin/python3\\n\\nimport math\\nimport uuid\\n\\nclass HyperLogLog:\\n\\n    constant = 0.72134\\n\\n    def __init__(self, m_bits) -> None:\\n        self.m_bits = m_bits\\n        self.registers = [0] * (1 << m_bits)\\n        self.register_bitmask = (1 << m_bits) - 1\\n```\\n    \\n\u63a5\u4e0b\u4f86\u5c31\u662f\u6211\u5011\u7684 hash function!  \\n\u85c9\u7531 % \u6293\u51fa\u6700\u5f8c\u7684 `64` \u4f4d  \\n\u4f46\u8981\u6ce8\u610f\u7684\u662f python \u7684 hash \u82e5\u662f\u4e1f\u5165\u6578\u5b57  \\n\u6703\u539f\u5c01\u4e0d\u52d5\u7684\u5410\u56de\u4f60\u50b3\u5165\u7684\u6578\u5b57  \\n\u6240\u4ee5\u9019\u500b\u7bc4\u4f8b\u8acb\u4e0d\u8981\u7121\u8166\u7528\u5c0f\u6578\u5b57\u4f86\u5be6\u9a57\uff0c\u5426\u5247\u5f97\u5230\u7684 hash \u6703\u4e0d\u5e73\u5747  \\n\\n\\n```py\\n    @classmethod\\n    def hash(cls, data) -> int:\\n        # get last 64 bits\\n        return hash(data) % (1 << 64)\\n```\\n\u4e0b\u4e00\u6b65\u5c31\u662f\u627e\u51fa\u6709\u5e7e\u500b\u9023\u7e8c\u7684 `0`  \\n\u5176\u5be6\u5c31\u662f\u627e\u51fa\u7b2c\u4e00\u500b `1`  \\n\u4f46\u8981\u6ce8\u610f\u662f\u5f9e\u5de6\u908a\u7b2c `m+1` \u500b bit \u958b\u59cb  \\n\u524d\u9762\u7684\u662f\u8981\u7576\u6210 register index  \\n\u90a3\u600e\u9ebc\u77e5\u9053\u67d0\u4e00\u4f4d\u662f\u4e0d\u662f `1` \u5462  \\n\u6211\u5011\u53ef\u4ee5\u7528\u5de6\u4f4d\u79fb\u4f86\u505a\u51fa\u4e00\u500b `00100...0` (\u4e8c\u9032\u4f4d) \u7684\u503c  \\n\u90a3\u500b 1 \u7684\u4f4d\u7f6e\u5c31\u662f\u6211\u5011\u60f3\u78ba\u8a8d\u7684\u4f4d\u7f6e\uff0c\u642d\u914d & \u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff01\\n```py\\n    def first_1_bit_position(self, hash_val)->int:\\n        \\"\\"\\"\\n        the structure of hash_val\'s bits: [m_bits, 64 - m_bits]\\n        find the first 1 position lies in the right part (64 - m_bits)\\n        \\"\\"\\"\\n        \\n        \\n        # from left to right\\n        for bit_pos in range(self.m_bits, 64):\\n        \\n            bit_mask = (1 << (64 - bit_pos - 1))\\n            \\n            if hash_val & bit_mask:\\n                return bit_pos - self.m_bits + 1\\n\\n        return 64 - self.m_bits\\n```\\n\u6211\u5011\u9084\u9700\u8981\u77e5\u9053\u67d0\u500b hash \u5c0d\u61c9\u7684 register \u662f\u54ea\u500b  \\n\u9019\u4e5f\u5f88\u7c21\u55ae\uff0c\u56e0\u70ba\u6211\u5011\u6709\u4e00\u958b\u59cb\u521d\u59cb\u5316\u7684 bitmask \u4e86  \\n\u53ea\u8981\u6293\u51fa\u524d `m` \u500b bits & \u4e00\u4e0b\u5c31\u77e5\u9053\u7d50\u679c\u4e86\uff01  \\n\u6293\u51fa\u524d `m` \u500b bits \u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u5c31\u662f\u76f4\u63a5\u53f3\u4f4d\u79fb >>\\n```py\\n    def get_register_index(self, hash_val): \\n\\n        return (hash_val >> (64 - self.m_bits)) & self.register_bitmask\\n```\\n\u5feb\u7d50\u675f\u4e86\uff01\uff01 \u6211\u5011\u7684\u7b2c\u4e00\u500b\u64cd\u4f5c `add_element`  \\n\u505a\u7684\u4e8b\u60c5\u4e5f\u5f88\u7c21\u55ae\\nhash \u5b8c\uff0c\u627e\u51fa\u5c0d\u61c9\u7684 register\uff0c\u66f4\u65b0\\n```py\\n    def add_element(self, obj):\\n        hash_val = hash(obj)\\n        \\n        register_index = self.get_register_index(hash_val)\\n\\n        self.registers[register_index] = max(self.registers[register_index], self.first_1_bit_position(hash_val))\\n```\\n\u6700\u5f8c\u4e00\u6b65\uff0c\u5957\u516c\u5f0f\ud83e\udd73  \\n\u6211\u5011\u53ef\u4ee5\u7528 python \u7684 sum \u4ee5\u53ca list comprehension \u4f86\u53d6\u4ee3\u919c\u919c\u7684\u8ff4\u5708\\n```py\\n    def get_cardinality(self):\\n        harmonic_mean = len(self.registers) / sum(pow(2, -register) for register in self.registers)\\n        \\n        return math.floor(harmonic_mean * len(self.registers) * self.constant)\\n```\\n\\n\\n\u6709\u8208\u8da3\u7684\u53ef\u4ee5\u8907\u88fd\u4e0b\u9762\u7684\u6263\u53bb\u73a9 \ud83d\ude35\u200d\ud83d\udcab\\n<details>\\n\\n<summary>Code</summary>\\n\\n\\n```py title=\\"hyperloglog.py\\"\\n#!/usr/bin/python3\\n\\nimport math\\nimport uuid\\n\\nclass HyperLogLog:\\n\\n    constant = 0.72134\\n\\n    def __init__(self, m_bits) -> None:\\n        self.m_bits = m_bits\\n        self.registers = [0] * (1 << m_bits)\\n        self.register_bitmask = (1 << m_bits) - 1 \\n\\n    \\n\\n    @classmethod\\n    def hash(cls, data) -> int:\\n        return hash(data) % (1 << 64)\\n        \\n\\n    def first_1_bit_position(self, hash_val)->int:\\n        \\"\\"\\"\\n        the structure of hash_val\'s bits: [m_bits, 64 - m_bits]\\n        find the first 1 position lies in the right part (64 - m_bits)\\n        \\"\\"\\"\\n        \\n        \\n        # from left to right\\n        for bit_pos in range(self.m_bits, 64):\\n        \\n            bit_mask = (1 << (64 - bit_pos - 1))\\n            \\n            if hash_val & bit_mask:\\n                return bit_pos - self.m_bits + 1\\n\\n        return 64 - self.m_bits\\n    \\n    def get_register_index(self, hash_val): \\n        return (hash_val >> (64 - self.m_bits)) & self.register_bitmask\\n        \\n    def add_element(self, obj):\\n        hash_val = hash(obj)\\n        \\n        register_index = self.get_register_index(hash_val)\\n\\n        self.registers[register_index] = max(self.registers[register_index], self.first_1_bit_position(hash_val))\\n    \\n    def get_cardinality(self):\\n        harmonic_mean = len(self.registers) / sum(pow(2, -register) for register in self.registers)\\n        \\n        return math.floor(harmonic_mean * len(self.registers) * self.constant)\\n    \\n\\n\\n\\ncardinality = 10 ** 7\\n\\nif __name__ == \\"__main__\\":\\n    hll = HyperLogLog(14)\\n    for i in range(cardinality):\\n        hll.add_element(str(uuid.uuid4()))\\n    print(hll.get_cardinality())\\n```\\n\\n</details>\\n\\n\\n\\n\\n## Reference\\n* [HyperLogLog](https://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf)"}]}}')}}]);